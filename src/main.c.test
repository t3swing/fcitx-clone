#include <X11/Xlib.h>
#include <stdio.h>
#include <X11/Xlocale.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/keysym.h>
#include "IC.h"
static XIMTriggerKey Trigger_Keys[] = {
    {XK_space, ControlMask, ControlMask},
    {0L, 0L, 0L}
};
Display        *dpy;
static XIMStyle Styles[] = {
    XIMPreeditPosition | XIMStatusNothing,
    XIMPreeditPosition | XIMStatusArea,
    XIMPreeditArea | XIMStatusArea,
    XIMPreeditNothing | XIMStatusNothing,
    XIMPreeditCallbacks | XIMStatusCallbacks,
    0
};
static XIMEncoding zhEncodings[] = {
    "COMPOUND_TEXT",
    NULL
};

XIMS            ims;
Bool            InitXIM (Window im_window);

int ProtoHandler (XIMS ims, IMProtocol * call_data)
{
    printf ("proto handler:%d\n", call_data->major_code);
    switch (call_data->major_code) {
    case XIM_OPEN:
	printf ("XIM_OPEN\n");
	return 1;
    case XIM_CLOSE:
	printf ("XIM_CLOSE\n");
	return 1;
    case XIM_CREATE_IC:
	printf ("XIM_CREATE_IC\n");
	return 1;
    case XIM_DESTROY_IC:
	printf ("XIM_DESTROY_IC:%d\n", ((IMForwardEventStruct *) call_data)->icid);
	return 1;
    case XIM_SET_IC_VALUES:
	printf ("XIM_SET_IC_VALUES:%d\n", ((IMForwardEventStruct *) call_data)->icid);
	return 1;
    case XIM_GET_IC_VALUES:
	printf ("XIM_GET_IC_VALUES\n");
	return 1;
    case XIM_FORWARD_EVENT:
	printf ("XIM_FORWARD_EVENT: %d  %d\n", ((IMForwardEventStruct *) call_data)->icid, ((IMForwardEventStruct *) call_data)->connect_id);
	return True;
    case XIM_SET_IC_FOCUS:
	printf ("XIM_SET_IC_FOCUS:conn=%d   ic=%d\n", ((IMForwardEventStruct *) call_data)->icid, ((IMForwardEventStruct *) call_data)->connect_id);
	return 1;
    case XIM_UNSET_IC_FOCUS:
	printf ("XIM_UNSET_IC_FOCUS:%d\n", ((IMForwardEventStruct *) call_data)->icid);
	return 1;
    case XIM_RESET_IC:
	printf ("XIM_RESET_IC\n");
	return True;
    case XIM_TRIGGER_NOTIFY:
	printf ("XIM_TRIGGER_NOTIFY\n");
    default:
	return True;
    }
}

Display        *dpy;

Bool XIMA (Window im_window)
{
    XIMStyles      *input_styles;
    XIMTriggerKeys *on_keys;
    XIMEncodings   *encodings;

    input_styles = (XIMStyles *) malloc (sizeof (XIMStyles));
    input_styles->count_styles = sizeof (Styles) / sizeof (XIMStyle) - 1;
    input_styles->supported_styles = Styles;

    if ((on_keys = (XIMTriggerKeys *)
	 malloc (sizeof (XIMTriggerKeys))) == NULL) {
	fprintf (stderr, "Can't allocate\n");
	exit (1);
    }
    on_keys->count_keys = sizeof (Trigger_Keys) / sizeof (XIMTriggerKey) - 1;
    on_keys->keylist = Trigger_Keys;

    encodings = (XIMEncodings *) malloc (sizeof (XIMEncodings));
    encodings->count_encodings = sizeof (zhEncodings) / sizeof (XIMEncoding) - 1;
    encodings->supported_encodings = zhEncodings;

    ims = IMOpenIM (dpy, IMModifiers, "Xi18n", IMServerWindow, im_window, IMServerName, "fcitx",
		    IMLocale, "zh_CN.gbk", IMServerTransport, "X/", IMInputStyles, input_styles, IMEncodingList, encodings, IMProtocolHandler, ProtoHandler, IMFilterEventMask, KeyPressMask | KeyReleaseMask, NULL);

    if (ims == (XIMS) NULL) {
	fprintf (stderr, "Start FCITX error. Another XIM daemon named is running?\n");
	return False;
    }

    IMSetIMValues (ims, IMOnKeysList, on_keys, NULL);

    return True;
}

int main (int argc, char *argv[])
{
    XEvent          event;
    XSetWindowAttributes attrib;
    unsigned long   attribmask;

    attrib.override_redirect = False;
    //attribmask = CWOverrideRedirect;
    if ((dpy = XOpenDisplay ((char *) NULL)) == NULL) {
	fprintf (stderr, "Error: FCITX can only run under X\n");
	return False;
    }

    Window          mainWindow =XCreateSimpleWindow (dpy,
                                         DefaultRootWindow (dpy),
                                         -1, -1, 1, 1, 0, 0, 0);

    if (mainWindow == (Window) NULL)
	return False;

    if (!XIMA (mainWindow))
	exit (4);

    for (;;) {
	XNextEvent (dpy, &event);

	if (XFilterEvent (&event, None) == True)
	    continue;
    }

    return 0;
}
